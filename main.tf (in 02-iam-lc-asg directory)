provider "aws" {
  region = "us-east-1" # Replace with your desired region
}

terraform {
  backend "s3" {
    bucket         = "your-unique-tf-state-bucket-name"
    key            = "webserver-app/terraform.tfstate" # Unique key for this set of resources
    region         = "us-east-1" # Replace with your desired region
    dynamodb_table = "your-unique-tf-state-lock-table"
    encrypt        = true
  }
}

resource "aws_iam_role" "webserver_role" {
  name = "webserver-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_policy" "s3_session_manager_policy" {
  name        = "s3-session-manager-policy"
  path        = "/"
  description = "IAM policy granting S3 and Session Manager access"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action   = ["s3:PutObject", "s3:GetObject"]
        Effect   = "Allow"
        Resource = "arn:aws:s3:::your-unique-webserver-config-bucket/*" # Replace with the S3 bucket ARN
      },
      {
        Action   = ["ssm:StartSession", "ssm:TerminateSession"]
        Effect   = "Allow"
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "s3_session_manager_attachment" {
  policy_arn = aws_iam_policy.s3_session_manager_policy.arn
  role       = aws_iam_role.webserver_role.name
}

data "template_file" "user_data" {
  template = file("userdata.sh")
}

resource "aws_launch_configuration" "webserver_lc" {
  name_prefix          = "webserver-lc-"
  image_id             = "ami-xxxxxxxxxxxxx" # Replace with the ID of your Golden AMI
  instance_type        = "t2.micro"
  iam_instance_profile = aws_iam_role.webserver_role.name

  user_data = data.template_file.user_data.rendered

  lifecycle {
    create_before_destroy = true
  }
}
