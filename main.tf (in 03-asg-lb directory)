provider "aws" {
  region = "us-east-1" # Replace with your desired region
}

terraform {
  backend "s3" {
    bucket         = "your-unique-tf-state-bucket-name"
    key            = "webserver-app/terraform.tfstate" # Unique key for this set of resources
    region         = "us-east-1" # Replace with your desired region
    dynamodb_table = "your-unique-tf-state-lock-table"
    encrypt        = true
  }
}

resource "aws_security_group" "webserver_sg" {
  name_prefix = "webserver-sg-"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_launch_configuration" "webserver_lc" {
  # ... (same content as in Step 2)
}

resource "aws_autoscaling_group" "webserver_asg" {
  name                 = "webserver-asg"
  max_size             = 1
  min_size             = 1
  desired_capacity     = 1
  launch_configuration = aws_launch_configuration.webserver_lc.name
  vpc_zone_identifier  = [aws_subnet.example_subnet.id]

  tag {
    key                 = "Name"
    value               = "webserver-instance"
    propagate_at_launch = true
  }
}

resource "aws_lb_target_group" "webserver_target_group" {
  name_prefix     = "webserver-tg-"
  port            = 80
  protocol        = "HTTP"
  vpc_id          = aws_vpc.example_vpc.id
  target_type     = "instance"

  health_check {
    healthy_threshold   = 2
    unhealthy_threshold = 2
    interval            = 30
    path                = "/"
    port                = "traffic-port"
    protocol            = "HTTP"
    timeout             = 5
  }
}

resource "aws_lb" "webserver_lb" {
  name               = "webserver-lb"
  load_balancer_type = "application"
  security_groups    = [aws_security_group.webserver_sg.id]
  subnets            = [aws_subnet.public_subnet.id]

  tags = {
    Name = "webserver-load-balancer"
  }
}

resource "aws_lb_listener" "webserver_listener" {
  load_balancer_arn = aws_lb.webserver_lb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.webserver_target_group.arn
  }
}

resource "aws_route53_zone" "example_zone" {
  name = "your-domain-name.com" # Replace with your domain name
}

resource "aws_route53_record" "webserver_alias" {
  zone_id = aws_route53_zone.example_zone.zone_id
  name    = "webserver.your-domain-name.com" # Replace with your subdomain
  type    = "A"
  alias {
    name                   = aws_lb.webserver_lb.dns_name
    zone_id                = aws_lb.webserver_lb.zone_id
    evaluate_target_health = true
  }
}
